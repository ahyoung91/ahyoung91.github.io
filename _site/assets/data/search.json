[
  
  {
    "title"    : "웹폰트",
    "category" : "",
    "tags"     : " 웹폰트, 웹폰트 최적화",
    "url"      : "/blog/2020-03-21-webfont",
    "date"     : "March 21, 2020",
    "excerpt"  : "웹폰트란?\n사용자의 로컬에 폰트 설치 여부와 상관 없이\n폰트 파일을 다운로드 하여 브라우저에 표시해주는 웹 전용 폰트이다.\n\n@font-face 속성\n\n@font-face {\n  font-family: NanumSquareWeb;\n  src: local(NanumSquareR),\n       local(NanumSquare),\n       url(NanumSquareR.eot?#iefix) format(&#39;embedded-opentype&#39;)...",
  "content"  : "웹폰트란?\n사용자의 로컬에 폰트 설치 여부와 상관 없이\n폰트 파일을 다운로드 하여 브라우저에 표시해주는 웹 전용 폰트이다.\n\n@font-face 속성\n\n@font-face {\n  font-family: NanumSquareWeb;\n  src: local(NanumSquareR),\n       local(NanumSquare),\n       url(NanumSquareR.eot?#iefix) format(&#39;embedded-opentype&#39;),\n       url(NanumSquareR.woff) format(&#39;woff&#39;),\n       url(NanumSquareR.ttf) format(&#39;truetype&#39;);\n  font-style: normal;\n  font-weight: normal;\n  unicode-range: U+0-10FFFF;\n}\n\nh1 {\n  font-family: NanumSquareWeb, sans-serif;\n}\n\n\n웹 폰트를 사용하려고 @font-face 를 적용한 코드이다. @font-face에는 font-family, src, font-style, font-weight, unicode-range 속성을 사용할 수 있다.\n\n1. font-family\n\nfont-family는 CSS에서 사용할 웹폰트 패밀리명이다.\n아래 코드는 내가 사용할 웹폰트 패밀리명을 NanumSquareWeb 으로 하겠다. 라고 선언한 예제이다.\n\n@font-face {\n  font-family: NanumSquareWeb;\n  src: url(NanumSquareR.woff) format(&#39;woff&#39;)\n}\n\n\nfont-family에서 선언한 웹폰트 패밀리명과 사용할 웹폰트 명이 같을 필요는 없다.\n\n@font-face {\n  font-family: &#39;아무폰트명&#39;;\n  src: url(NanumSquareR.woff) format(&#39;woff&#39;)\n}\n\n\n위의 코드처럼 웹폰트 패밀리명을 ‘아무폰트명’으로 정하고 나눔스퀘어 폰트를 사용해도 상관없다.\n하지만, 유지보수를 위해 웹폰트 패밀리명과 사용할 폰트명을 동일하게 하는것이 좋다.\n\n**참고로 IE 11 이하 에서는 font-family에 선언한 웹폰트 패밀리명이 31자 이상 이 되면 적용되지 않는다.\n\n2. src\n\n\n  local()\n    \n      로컬에 이미 설치 된 폰트의 경로를 적는 속성\n    \n  \n  url()\n    \n      다운로드 할 웹폰트의 주소를 적는 속성\n    \n  \n\n\n두 속성 모두 , 를 사용하여 여러번 중첩해서 사용할 수 있다.\n\n@font-face {\n  font-family: NanumSquareWeb;\n  src: local(NanumSquareR), /* 첫번째 */\n       local(NanumSquare), /* 두번째 */\n       url(NanumSquareR.eot), /* 세번째 */\n       url(NanumSquareR.woff), /* 네번째 */\n       url(NanumSquareR.ttf); /* 다섯번째 */\n}\n\n\n브라우저는\n\nlocal(NanumSquareR) → local(NanumSquare) → url(NanumSquareR.eot) → url(NanumSquareR.woff) → url(NanumSquareR.ttf)\n\n\n위의 순서대로 폰트를 찾는다.\n\n만약 나눔스퀘어 폰트가 설치되지 않은 사용자가 크롬브라우저 를 통해 접속하면\n\nlocal(NanumSquareR) → local(NanumSquare) → url(NanumSquareR.eot) → url(NanumSquareR.woff)\n\n\n위 순서대로 폰트를 찾다가 NanumSquareR.woff 파일이 적용된다. 그 이유는 크롬브라우저는 .eot 파일을 지원하지 않기 때문이다.\n즉, 불필요한 다운로드 가 일어나게 된다.\n\n불필요한 다운로드를 막기 위해 format속성 을 사용한다.\n\n@font-face {\n  font-family: NanumSquareWeb;\n  src: local(NanumSquareR), /* 첫번째 */\n       local(NanumSquare), /* 두번째 */\n       url(NanumSquareR.eot) format(&#39;embedded-opentype&#39;),\n       url(NanumSquareR.woff) format(&#39;woff&#39;), /* 세번째 */\n       url(NanumSquareR.ttf) format(&#39;truetype&#39;); /* 네번째 */\n}\n\n\nformat속성 을 사용하면 브라우저에서 지원 가능한 파일만 다운로드 받기 때문에 속도가 빨라진다.\n\n**참고로 IE 8 이하 에서는 local()을 인식하지 못한다. 사용하지 않는것이 좋다.\n\n3. font-weight, font-style\n\n폰트 패밀리명을 하나로 하고, 여러개의 스타일을 표현하고자 할 때 사용한다.\n\n@font-face {\n    font-family: NanumSquareWeb;\n    src: url(NanumSquareL.woff) format(&#39;woff&#39;);\n    font-weight: 300;\n}\n@font-face {\n    font-family: NanumSquareWeb;\n    src: url(NanumSquareR.woff) format(&#39;woff&#39;);\n    font-weight: 400;\n}\n@font-face {\n    font-family: NanumSquareWeb;\n    src: url(NanumSquareB.woff) format(&#39;woff&#39;);\n    font-weight: 700;\n}\n@font-face {\n    font-family: NanumSquareWeb;\n    src: url(NanumSquareEB.woff) format(&#39;woff&#39;);\n    font-weight: 800;\n}\n\n\n4. unicode-range\n\n유니코드로 지정한 글자에만 웹 폰트를 적용하는 속성이다.\n\n\n    \n    \n        \n    \n    \n\n\n@font-face {\n    font-family: NanumSquareWeb;\n    src: url(NanumSquareL.woff) format(&#39;woff&#39;);\n    unicode-range: U+BC14, U+CC28\n}\n\n\n위 코드에서 U+BC14 는 글자 ‘바’에 해당하는 유니코드고, U+CC28 는 글자 ‘차’에 해당하는 유니코드다. 전체 텍스트에서 unicode-range 속성에 유니코드로 등록된 글자인 ‘바’와 ‘차’ 에만 웹 폰트가 적용되었다.\n\nunicode-range 속성의 장점은 등록된 글자가 텍스트에 없으면 웹 폰트 다운로드를 요청하지 않는다는 것이다. 즉, 웹 폰트를 사용하지 않으면 불필요한 다운로드를 막을 수 있다.\n\n브라우저별 Font-format\n\n\n    \n    \n        \n    \n    \n\n\n\n  EOT\n    \n      IE 6~8 사용 가능\n    \n  \n  WOFF\n    \n      모든 브라우저에서 사용 가능\n    \n  \n  WOFF2\n    \n      IE를 제외한 모든 브라우저에서 사용 가능\n    \n  \n\n\n@font-face {\n  font-family: NanumSquare;\n  src: url(NanumSquareR.eot); /* IE 호환성 보기 */\n  src: url(NanumSquareR.eot#iefix) format(&#39;embedded-opentype&#39;), /* IE 6 ~ 8 */\n       url(NanumSquareR.woff2) format(&#39;woff2&#39;), /* WOFF2 지원 브라우저 */\n       url(NanumSquareR.woff) format(&#39;woff&#39;), /* 모던 브라우저 */\n       url(NanumSquareR.ttf) format(&#39;truetype&#39;);\n}\n\n\n위와 같이 작성할 수 있겠다. 어떻게 다운로드가 이루어지는지 살펴보자.\n\n\n  IE 6~8 로 접근하면 NanumSquareR.eot? 가 다운로드 된다.\n  IE 호환성 보기 로 접근하면 NanumSquareR.eot 가 다운로드 된다.\n  IE 9이상 으로 접근하면 NanumSquareR.eot? 가 다운로드 된다.\n  Safari 로 접근할 때는 NanumSquareR.woff가 다운로드 된다.\n  Chrome, firefox, opera 로 접근할 때는 NanumSquareR.woff2가 다운로드 된다.\n\n\n하위브라우저 대응이 필요없다면 아래코드와 같이 작성하면 최적화에 도움이 된다.\n\n@font-face {\n  font-family: NanumSquare;\n  src: url(NanumSquareR.woff2) format(&#39;woff2&#39;),\n       url(NanumSquareR.woff) format(&#39;woff&#39;),\n       url(NanumSquareR.ttf) format(&#39;truetype&#39;);\n}\n\n\nFOUT / FOIT / FOFT\n\n1. FOUT(Flash of Unstyled Text)\n\n웹폰트 파일이 로드되기 전까지 기본폰트가 노출되다가 웹폰트 로드가 완료되면 웹폰트로 바뀌면서 깜빡이는 현상이다.\nIE 브라우저 에서 발생한다.\n\n\n    \n    \n        \n    \n    \n\n\n2. FOIT(Flash of Invisible Text)\n\n웹폰트 파일이 로드되기 전까지 웹 페이지를 로드하지 않고 웹폰트가 로드되면 웹페이지를 로드하기 때문에 로드가 완료되기 전까지 텍스트가 안보이는 현상이다. IE를 제외한 Chrome, Safari 등에서 발생한다.\n\n\n    \n    \n        \n    \n    \n\n\n3. FOFT(Flash of Faux Text)\n\n웹폰트 파일에 font-weight, font-style과 관련된 폰트가 있을 시 로드 전 브라우저에서 임시로 폰트의 굵기와 스타일을 생성하여 노출하고 웹폰트 로드가 완료되면 웹폰트로 바뀌는 현상이다. 이는 스크립트로 만들어진 현상으로 시스템글꼴 → 웹 폰트 Regular → 웹 폰트 Bold 순으로 바뀐다.\n\n\n    \n    \n        \n    \n    \n\n\nFOFT라는 현상을 스크립트로 만든 이유는 웹폰트의 종류가 많을 경우 첫 폰트를 빠르게 보여주기 위해서이다.\n\nFOUT와 FOIT는 나눔스퀘어 Regular와 나눔스퀘어 Bold 웹폰트를 사용할 때 두 웹폰트를 동시에 다운로드 하게 된다.\n두 폰트가 동시에 다운로드 되기 때문에 다운로드가 완료되어 웹폰트 적용 시점은 다운로드 완료 이후이다.\n\n하지만 FOFT는 나눔스퀘어 Regular와 나눔스퀘어 Bold 웹폰트를 사용할 때 나눔스퀘어 Regular 먼저 다운로드 하고 Bold를 다운로드 한다.\n\n그래서 나눔스퀘어 Regular가 다운로드가 완료되어 먼저 적용되고 Bold는 이후에 적용된다.\n\n해결방법\n\n1. CSS의 font-display 속성\n\nauto\n\n  브라우저의 기본동작에 맡기는 방식이다.\n\n\nblock\n\n  FOIT와 동일하게 작용하는 속성이다. 웹 폰트가 로딩되지 않았을 때 텍스트를 렌더링 하지 않는다.(최대 3초) 웹폰트 로딩이 완료되면 웹폰트를 적용한다.\n\n\nswap\n\n  FOUT와 동일하게 작용하는 속성이다. 응답이 올 때까지 무한정 기다리고 그 전까진 바로 기본폰트를 보여준다. 꼭 적용해야만 하는 중요폰트일 경우에 쓸 수 있다.\n\n\nfallback\n\n  우선 100ms동안 텍스트가 보이지 않고 그 후 폴백 폰트로 렌더링한다. 특이한 점은 2초의 전환(swap) 시간이 있다는 점이다. 이 시간 안에 로딩이 완료되면 웹 폰트로 전환한다. 하지만 이 시간이 지나면 웹폰트 다운로드가 완료되어도 웹폰트로 전환하지 않고 폴백 폰트를 유지한다. 전환 시간 이후 다운로드 된 웹폰트는 웹페이지에 적용되지는 않지만 캐시에는 저장된다. 즉, 추후에 사용자가 다시 방문했을 때 바로 웹폰트가 적용된다는 장점이 있다.\n\n\noptional\n\n  optional 옵션은 fallback 옵션과 비슷하지만 다르게 작동하는 옵션이다. 우선 100ms 동안 텍스트가 보이지 않고 그 후 폴백 폰트로 전환한다. 웹 폰트를 다운로드하지만 브라우저가 네트워크 상태를 파악해 웹 폰트 전환 여부를 결정한다는 점이 이 옵션의 특이한 점이다. 예를 들어 네트워크의 연결 상태가 안 좋으면 웹 폰트의 다운로드가 완료되어도 캐시에 저장만 하고 전환은 하지 않는다.\n\n\n\n    \n    \n        \n    \n    \n\n\nIE와 edge를 빼고는 모두 지원하므로 텍스트가 보이지 않는 문제가 발생하는 브라우저에서는 문제없이 사용할 수 있다.\n하지만 여기에도 문제는 있다. 의도적으로 텍스트가 보이지 않는 문제는 해결했지만 그로인해 FOFT현상이 나타나 레이아웃이 깨진 듯한 화면이 나타나게 된다.\n\n2. Google Webfont Loader\n\n그럴때엔 구글에서 제공하는 Google Webfont Loader를 사용하면 해결할 수 있다.\n\nhttps://ajax.googleapis.com/ajax/libs/webfont/1.6.16/webfont.js\nWebFont.load({\n  custom: {\n    families: [&#39;NanumSquare&#39;], // @font-face에 선언한 폰트 패밀리명\n    urls: [&#39;../css/NanumSquare.css&#39;], // @font-face가 선언된 css 경로\n  }\n});\n\n위의 스크립트를 적용하면 해당 웹 폰트를 추적하면서 자동으로 html에 아래의 클래스가 적용된다.\n\n폰트 패밀리는 @font-face에서 선언한 폰트 패밀리명, 스타일 굵기는 알파벳 n에 @font-face에서 선언한 font-weight의 백의자리 수를 합친 값 이다.\n\n\n  wf-loading: 1개 이상 폰트가 로딩 중\n  wf-active: 1개 이상 폰트 사용 가능\n  wf-inactive: 모든 폰트 사용 불가능\n  wf-폰트패밀리-스타일굵기-loading: 특정 폰트 로딩 중\n  wf-폰트패밀리-스타일굵기-active: 특정 폰트 사용 가능\n  wf-폰트패밀리-스타일굵기-inactive: 특정 폰트 사용 불가능\n\n\nFOUT\n\n/* 웹 폰트 사용 가능할 때 속성 적용 */\n.wf-nanumsquare-n4-active #fonts_loaded { \n  font-family: NanumSquare, sans-serif;\n}\n\n\nFOIT\n\n/* 웹 폰트 다운로드 전에는 화면을 보여주지 않음 */\n.#fonts-loaded { \n  display: none;\n}\n\n/* 웹 폰트 사용이 가능하면 화면을 보여주고 웹 폰트 속성 적용 */\n.wf-nanumsquare-n4-active #fonts_loaded { \n  display: block;\n  font-family: NanumSquare, sans-serif;\n}\n\n\nFOFT\n\n/* 나눔스퀘어 Regular 폰트가 사용 가능할 때 웹 폰트 속성 적용 */\n.wf-nanumsquareregular-n4-active #fonts_loaded { \n  font-family: NanumSquare-Regular, sans-serif;\n}\n\n/* 나눔스퀘어 Bold 폰트가 사용 가능할 때 웹 폰트 속성 적용 */\n.wf-nanumsquarebold-n4-active #fonts_loaded { \n  font-family: NanumSquare-Bold, sans-serif;\n}\n\n\n스크립트\n\nWebFont.load({\n  custom: {\n    families: [&#39;NanumSquare-Regular&#39;, &#39;NanumSquare-Bold&#39;],\n    urls: [&#39;../css/NanumSquare.css&#39;]\n  }\n})\n\n4. preload\n\n&amp;lt;head&amp;gt;\n  &amp;lt;link rel=&quot;preload&quot; href=&quot;../webfont/NanumSquare/NanumSquare.woff&quot; as=&quot;font&quot; crossorigin&amp;gt;\n&amp;lt;/head&amp;gt;\n\n\npreload를 이용해서 폰트를 받으면 다른 어떤 것보다 먼저 리소스를 요청한다. 화면에 꼭 필수적인 폰트를 로딩해야 할 때 사용하면 좋다.\nas와 crossorigin이 있어야 두 번 다운로드하지 않는다.\n\nFOUT와 FOIT가 없어지지만, 그만큼 렌더링이 느려진다.\n\n\n    \n    \n        \n    \n    \n\n\npreload 옵션은 아직 Chrome과 Safari만 지원하고 IE와 Edge, Firefox는 지원하지 않는다.\n\n\n\n참고사이트\n\n  웹폰트 사용하기\n  naverD2\n  웹폰트 최적화하기\n\n"
} ,
  
  {
    "title"    : "SASS",
    "category" : "",
    "tags"     : " sass, scss, gulp",
    "url"      : "/blog/2020-01-21-sass",
    "date"     : "January 21, 2020",
    "excerpt"  : "SASS는 css를 만들어주는 언어로 자바스크립트처럼 특정 속성(ex. color, margin, width 등)의 값을 변수로 선언하여 필요한 곳에 선언된 변수를 적용할 수도 있고, 반복되는 코드를 한번의 선언으로 여러곳에 재사용할 수 있도록 하는 전처리기이다.\n\n왜 css가 아닌 sass를 사용하는가? 라는 의문을 가질 수 있다.\n하드 코딩을 하다보면 사실 html 마크업 보다는 css를 작성하는데 훨씬 더 많은 시간을 할애한다.\n모든...",
  "content"  : "SASS는 css를 만들어주는 언어로 자바스크립트처럼 특정 속성(ex. color, margin, width 등)의 값을 변수로 선언하여 필요한 곳에 선언된 변수를 적용할 수도 있고, 반복되는 코드를 한번의 선언으로 여러곳에 재사용할 수 있도록 하는 전처리기이다.\n\n왜 css가 아닌 sass를 사용하는가? 라는 의문을 가질 수 있다.\n하드 코딩을 하다보면 사실 html 마크업 보다는 css를 작성하는데 훨씬 더 많은 시간을 할애한다.\n모든 레이아웃을 css로 제어해야 하기 때문이다.\n그러다보면 여러번 반복되는 속성들을 사용하기도 하고, 다른 곳에서 작성했던 속성을 다시 또 작성하는 등 번거로운 일들이 발생한다.\n그럴때에 \nscss를 사용하면 생산적인 코드를 작성\n할 수 있다.\n\n\n\n실제 프로젝트에 사용 된 SASS\n\n@mixin, @include\n실제 m.talk에서 사용된 코드이다.\n자주 쓰는 속성(한줄 말줄임, 2,3줄 이상의 멀티 말줄임 등)을 \n@mixin으로 정의한 뒤 @include\n로 불러내어 사용할 수 있다.\n아래 코드를 보면 이해가 쉽게 될 것이다.\n\nInput\n\n&amp;lt;div&amp;gt;\n  &amp;lt;p class=&quot;test&quot;&amp;gt;\n    wwwWWWWWWWWwwwwwwwwwwwwwwww\n  &amp;lt;/p&amp;gt;\n&amp;lt;/div&amp;gt;\n\n@mixin ellipsis {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n@mixin ellipsisMulti($line_num) {\n    display: -webkit-box;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    word-break: break-all;\n    word-wrap: break-word;\n    -webkit-line-clamp: $line_num;\n    -webkit-box-orient: vertical;\n}\n\n.test {\n  @include ellipsisMulti(1);\n\n  max-height: 18px;\n  line-height: 18px;\n}\n\nOutput\n\n.test {\n    display: -webkit-box;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    word-break: break-all;\n    word-wrap: break-word;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n    max-height: 18px;\n    line-height: 18px;\n}\n\n변수설정\n\n자주 사용되는 컬러\n나, 텍스트를 변수로 설정\n해두면 유지보수에 용이하다. 실제 네이버 파트너센터에 사용 된 코드이다.\n\nInput\n\n&amp;lt;div class=&quot;test&quot;&amp;gt;\n  자주 쓰이는 컬러를 변수로 설정해줌.\n&amp;lt;/div&amp;gt;\n\n$point_blue : #43a0fa; // 사용처 : lnb\n$point_green : #02b336;\n$point_lightgreen : #0abe16;\n$point_lightgreen2 : #00c73c;\n$point_red : #fc4c4e;\n$main_black : #181b1e; // 주로 페이지 타이틀 쪽에서 사용하는 블랙\n$black : #3e4146; // 본문타이틀 + 본문내용 에서 사용하는 블랙\n$point_gray : #80868e; // 주로 서브텍스트에서 사용하는 그레이\n$point_lgray : #abb3ba; // 주로 placeholder,  미설정텍스트에 사용되는 밝은그레이\n\n.test {\n  color: $point_blue;\n}\n\nOutput\n\n.test {\n    color: #43a0fa;\n}\n\nGulp\n\n빌드 자동화 도구인 Gulp를 사용하면 명령어를 통해 보다 쉽게 sass를 사용할 수 있다.\n\n여러 task들을 정의하고 명령어를 통해 task들을 실행할 수 있다.\ngulpfile.js 파일을 생성하여 아래와 같은 코드를 넣어서 실제 talk,m.talk에서 사용했다.\n\n// ---------------------------------\n// Tasks\n// ---------------------------------\n// task.bs\ngulp.task(&#39;bs&#39;, function () {\n\tbrowserSync({\n\t\tfiles: [&#39;*.html&#39;, &#39;*.php&#39;],\n\t\tproxy: &#39;localhost:80&#39;,\n\t\topen: &#39;external&#39;,\n\t\tlogPrefix: &quot;bs&quot;\n\t});\n\n\tgulp.watch([&#39;src/scss/**/*.scss&#39;], [&#39;sass&#39;]);\n\tgulp.watch([&#39;src/**/*.html&#39;, &#39;src/css/**/*.css&#39;, &#39;src/**/*.php&#39;, &#39;src/js/**/*.js&#39;]).on(&#39;change&#39;, browserSync.reload);\n});\n\n위 코드를 설명하자면 문서파일을 수정하고 실제 화면을 새로고침 할 필요없이 자동으로 새로고침 될 수 있게 했다.\n\n// ---------------------------------\n// Tasks\n// ---------------------------------\n// task.sass\ngulp.task(&#39;sass&#39;, function () {\n\treturn gulp.src(&#39;src/scss/**/*.scss&#39;)\n\t\t.pipe(sourcemaps.init())\n\t\t.pipe(sass({\n\t\t\toutputStyle: &#39;expanded&#39;, // nested, expanded, compact, compressed\n\t\t\tindentType: &#39;tab&#39;,\n\t\t\tindentWidth: 1\n\t\t}).on(&#39;error&#39;, sass.logError))\n\t\t.pipe(sourcemaps.write(&#39;./&#39;))\n\t\t.pipe(gulp.dest(&#39;src/css&#39;))\n\t\t.pipe(browserSync.stream());\n});\n\nscss파일을 수정 한 뒤 저장하면 자동으로 컴파일된다.\n\n// ---------------------------------\n// Tasks\n// ---------------------------------\n// task.sprite\ngulp.task(&#39;sprite&#39;, function() {\n\tvar folders = getFolders(dir.source + dir.img + dir.sprite);\n\tfolders.map(function(folder) {\n\t\tvar spriteData = gulp.src(dir.sprite + folder + &#39;/*.png&#39;, {cwd: dir.source + dir.img}).pipe(spritesmith({\n\t\t\timgPath: &#39;../&#39; + dir.img + &#39;sp_&#39; + folder + &#39;.png&#39;,\n\t\t\timgName: &#39;sp_&#39; + folder + &#39;.png&#39;,\n\t\t\tcssName: &#39;_sp_&#39; + folder + &#39;.scss&#39;,\n\t\t\tpadding: 10,\n\t\t\talgorithm: &#39;binary-tree&#39;, //top-down, left-right, diagonal, alt-diagonal, binary-tree\n\t\t\tcssTemplate: dir.source + dir.scss + dir.lib + dir.png_template,\n\t\t\tcssVarMap: function(sprite) {\n\t\t\t\tsprite.name = folder + &#39;-&#39; + sprite.name;\n\t\t\t\tsprite.origin = &#39;sp_&#39; + folder;\n\t\t\t},\n\t\t\tcssSpritesheetName: &#39;sp_&#39; + folder\n\t\t}));\n\n\t\tspriteData.img\n\t\t\t.pipe(buffer())\n\t\t\t// .pipe(tiny())\n\t\t\t.pipe(gulp.dest(dir.source + dir.img));\n\t\tspriteData.css.pipe(gulp.dest(dir.source + dir.scss + dir.lib));\n\t});\n});\n\n// ---------------------------------\n// Tasks\n// ---------------------------------\n// task.svg_sprite\ngulp.task(&#39;svg_sprite&#39;, function () {\n\tvar folders = getFolders(dir.source + dir.img + dir.svg_sprite);\n\tfolders.map(function (folder) {\n\t\treturn gulp.src(folder + &#39;/*.svg&#39;, {cwd: dir.source + dir.img + dir.svg_sprite})\n\t\t\t.pipe(svgSprite({\n\t\t\t\tshape: {\n\t\t\t\t\tspacing: {\n\t\t\t\t\t\tpadding: 10\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmode: {\n\t\t\t\t\tcss: {\n\t\t\t\t\t\trender: {\n\t\t\t\t\t\t\tscss: {\n\t\t\t\t\t\t\t\ttemplate: dir.source + dir.scss + dir.lib + dir.svg_template,\n\t\t\t\t\t\t\t\tdest: &#39;../&#39; + dir.scss + dir.lib + &#39;_sp_&#39; + folder + &#39;.scss&#39;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmixin: folder,\n\t\t\t\t\t\tdest: &#39;./&#39;,\n\t\t\t\t\t\tsprite: &#39;../img/sp_&#39; + folder,\n\t\t\t\t\t\tbust: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}))\n\t\t\t.pipe(gulp.dest(dir.source + dir.img));\n\t});\n});\n\nOutput\n\n$chat_file-ico_asf: 116px 0px -116px 0px 106px 140px 686px 440px &#39;../img/sp_chat_file.png&#39; &#39;chat_file-ico_asf&#39; &#39;sp_chat_file&#39;;\n\n실제 사용 방법\n\n&amp;amp;.asf {\n  @include sp_chat_file_on($chat_file-ico_asf)\n}\n\n웹 사이트 성능 최적화 방법 중 하나인 이미지 스프라이트이다.\n여러장의 이미지를 한장의 png파일로 만들어서 그 이미지를 사용한다.\n페이지에 쓰이는 이미지들을 한 곳에 모아두고 좌표을 적어서 사용한다.\n\nGulp task를 사용하지 않으면 이미지를 추가할때마다 좌표값을 일일이 계산해서 입력해줘야 하는 번거로움이 있다.\n그럴 때 아주 유용한 task인데 각각의 이미지 좌표를 해당 변수에 담아 @include로 사용하고 싶은 이미지의 변수를 불러오면 자동으로 해당하는 이미지의 좌표가 적용된다.\n"
} ,
  
  {
    "title"    : "Word break",
    "category" : "",
    "tags"     : " word-break, normal, break-word, keep-all",
    "url"      : "/blog/2020-01-20-word-break",
    "date"     : "January 20, 2020",
    "excerpt"  : "작업을 하다보면 가볍게 이해한 속성을 바탕으로 관습적으로 사용하는 속성들이 있다.\n그 중 word-break 속성에 대해 조금 더 명확하게 알고 넘어가는게 좋겠다고 생각했다.\nword-break란 단어의 분리를 어떻게 할 것인지 결정한다.\n중요하게 기억할 큰이슈들은 한 단어의 넓이가 자신을 감싸고 있는 tag의 width보다 클경우에 생긴다는 점이다.\n그리고 여기서 영어와 CJK(Chinese/Japanese/Korean text - 이하...",
  "content"  : "작업을 하다보면 가볍게 이해한 속성을 바탕으로 관습적으로 사용하는 속성들이 있다.\n그 중 word-break 속성에 대해 조금 더 명확하게 알고 넘어가는게 좋겠다고 생각했다.\nword-break란 단어의 분리를 어떻게 할 것인지 결정한다.\n중요하게 기억할 큰이슈들은 한 단어의 넓이가 자신을 감싸고 있는 tag의 width보다 클경우에 생긴다는 점이다.\n그리고 여기서 영어와 CJK(Chinese/Japanese/Korean text - 이하 한글로 표현) 는 word-break의 적용이 다른 value가 있다는 점이다.\n\n\n\nword-break: normal;\n\n한글은 tag의 width 크기보다 넓은 한개의 단어일경우에도 글자 단위로 줄바꿈해준다.\n하지만 영어의 경우에는 넘쳐서 디자인이 깨지는 형태로 표현된다.\n\nword-break: break-word;\n\n영어에는 잘 적용이되어 단어별로 줄바꿈이 된다. 하지만 한글에는 실제적으로 normal로 적용이 된다. 그리하여 글자 단위로 줄바꿈이 된다. 그리하여 넘치는 이슈가 생길일은 없지만 한글의 경우 단어별로 끊어주지 않게되어 이쁘지 않게 표현된다.\n\nword-break: keep-all;\n\n한글과 영어 모두 길이가 긴 단어의 경우 container를 넘치게 되고 줄바꿈되지 않는다. 디자인을 깨뜨리는 이슈를 발생시키게 된다.\n\n결론\n\n    See the Pen MWYxZmQ by ahyoung\n    (@ahyoung) on CodePen.\n\n\n위의 코드펜에서 주석을 풀면서 해당 속성을 확인해보자.\n\nword-break와 같은 텍스트에 관한 기본값이 보통 inherit으로 설정되어 있다. 그래서 상위태그에 속성을 주면 상속이 된다.\n\nbody정도에 word-break: break-word; 를 주어 영어는 단어별로 줄바꿈될테고, 한글인경우 필요한부분에 keep-all 을 따로 줄수있겠다.\n\n한글 문장이 대부분인 사이트여서 word-break속성을 반복적으로 주기싫다면, word-break: keep-all;을 body에 주고 한단어가 넘치는 이슈가 발생하는 곳에 word-break; 를 각각 줄수있겠다.\n"
} ,
  
  {
    "title"    : "Position",
    "category" : "",
    "tags"     : " display, positon, static, relative, absolute, fixed",
    "url"      : "/blog/2020-01-15-position",
    "date"     : "January 15, 2020",
    "excerpt"  : "태그들의 기본 position 은 static 으로 없다고 생각해도 무관하겠다.\n\n어떠한 대상에게 position을 준다면(por,poa,pof 어떤거라도 무관) position 이 갖는 특성을 갖게 되는것이다.\n그 특성 left,right,top,bottom,z-index 5가지이다. 즉, 좌표 값이 생긴다고 생각하면 된다.\nleft,right는 x축, top,bottom은 y축, z-index는 z축을 말하겠으며, 즉 position이...",
  "content"  : "태그들의 기본 position 은 static 으로 없다고 생각해도 무관하겠다.\n\n어떠한 대상에게 position을 준다면(por,poa,pof 어떤거라도 무관) position 이 갖는 특성을 갖게 되는것이다.\n그 특성 left,right,top,bottom,z-index 5가지이다. 즉, 좌표 값이 생긴다고 생각하면 된다.\nleft,right는 x축, top,bottom은 y축, z-index는 z축을 말하겠으며, 즉 position이 주어진단것은 z축이 생기므로 높낮이를 평가할수 있는것이다.\nposition 이 없다면 위와같은 속성또한 css에 준다하여도 반영되지 않는다. inline 요소에게 width,height 를 주어도 반영되지 않는것고 같다고 생각하면되겠다.\n각 position의 종류에따라 다른 기준에 의하여 좌표값들이 반영된다.\n\n\n\nposition: relative;\n\nposition: relative 객체는 자기 자신 기준으로 top,left,right,bottom 을 이용하여 이동가능하다.\n\nposition: absolute;\nposition: absolute 포지션을 갖은 가장 가까운 부모기준으로 top,left,right,bottom 을 이용하여 이동가능하다.\n\nposition: fixed;\nposition: fixed 윈도우 즉, 화면 기준으로 top,left,right,bottom 을 이용하여 이동가능하다.\n"
} ,
  
  {
    "title"    : "브라우저 렌더링",
    "category" : "",
    "tags"     : " ",
    "url"      : "/blog/2020-01-14-rendering",
    "date"     : "January 14, 2020",
    "excerpt"  : "코딩을 하다가 화면에 내가 코딩한 화면이 어떻게 그려지는가 궁금해졌다. \n어떻게 그려지는가를 알면 웹 성능을 최적화 하는데에 도움이 될 거 같아 포스트를 해본다.\n\n클라이언트가 브라우저 검색창에 주소를 치면 웹 서버는 해당 주소에 맞는 html문서를 내보낸다.\n\n\n    \n    \n        \n    \n    \n\n\n해당 주소에 맞는 html문서를 내보낼 때에 렌더링 과정을 거치는데 대부분의 브라우저는 렌더링을 수행하는 렌더링 엔진(Re...",
  "content"  : "코딩을 하다가 화면에 내가 코딩한 화면이 어떻게 그려지는가 궁금해졌다. \n어떻게 그려지는가를 알면 웹 성능을 최적화 하는데에 도움이 될 거 같아 포스트를 해본다.\n\n클라이언트가 브라우저 검색창에 주소를 치면 웹 서버는 해당 주소에 맞는 html문서를 내보낸다.\n\n\n    \n    \n        \n    \n    \n\n\n해당 주소에 맞는 html문서를 내보낼 때에 렌더링 과정을 거치는데 대부분의 브라우저는 렌더링을 수행하는 렌더링 엔진(Rendering Engine)을 가지고 있다.\n\n브라우저별 렌더링 엔진\n\n  크롬, 오페라\n    \n      블링크(Blink) - 웹키트에서 파생된 엔진\n    \n  \n  인터넷 익스플로러\n    \n      트라이던트(Trident)\n    \n  \n  파이어폭스, 모질라\n    \n      게코(Gecko)\n    \n  \n  사파리\n    \n      웹키트(Webkit)\n    \n  \n\n\n브라우저마다 렌더링 엔진이 다르기 때문에 똑같은 html문서를 렌더링 하는 과정에서 미세한 차이가 존재한다.\n\n렌더링 엔진 동작 과정\n\n아래는 Webkit 엔진 기준으로 설명한다.\n\n\n    \n    \n        \n    \n    \n\n\n1. 불러오기\n\n서버로부터 전달 받는 리소스 스트림을 읽는 과정이다. 읽으면서 어떤 파일인지, 데이터인지 파일을 다운로드 할 것인지 등을 결정한다.\n\n2. 파싱과 DOM 트리 구축\n\n웹 엔진이 가지고 있는 HTML/XML 파서가 문서를 파싱해서 DOM TREE를 만든다.\n파싱이란 브라우저가 코드를 이해하고 사용할 수 있는 구조로 변환하는 작업이다.\n여기서 DOM TREE란 HTML 구조를 있는 그대로 표현하는 트리라고 할 수 있겠다.\n\n\n    \n    \n        \n    \n    \n\n\n3. CSSOM (CSS Object Model) 구축\n\n브라우저가 HTML을 파싱하는 과정에서 css파일을 불러오게 된다. css 파일을 불러온 뒤, HTML과 마찬가지로 브라우저가 이해하고 처리할 수 있는 형식으로 변환해야 한다.\n그 과정은 DOM을 생성하는 과정과 동일하다. 단 출력된 결과는 CSSOM(CSS Object Model) 이라고 부른다.\n\n\n    \n    \n        \n    \n    \n\n\n4. 렌더 트리 (Render Tree)\n\n앞서 만든 DOM 트리와, CSSOM 트리는 서로 연관이 없는 독립적인 객체이다. DOM 트리는 콘텐츠를 의미하고, CSSOM은 문서에 적용되어야 하는 스타일 규칙을 의미한다.\n이 두 개의 트리를 결합하여 렌더 트리를 생성\n한다.\n\n렌더 트리는 DOM 트리의 최상위 노드부터 각각의 노드를 탐색하여 렌더링에 필요한 노드들을 CSSOM 트리와 일치시켜 생성한다. 그리고 DOM 트리를 탐색하는 과정에서 렌더링 출력에 반영되지 않는 불필요한 노드들은 건너뛰게 된다. 예를들면 script 태그나, meta 태그 같은 것들이 있다. 또한 display:none 처럼 CSS를 통해 렌더링 출력에 반영되지 않는 노드들도 실제 화면에서 렌더링이 되지 않기 때문에 렌더 트리에서 제외된다. 다만 visibility:hidden 속성은 렌더 트리에 포함된다. 그 이유는 visibility:hidden 속성은 렌더링이 되더라도 여전히 레이아웃에서 공간을 차지하기 때문이다.\n\n\n    \n    \n        \n    \n    \n\n\n5. 레이아웃 처리\n\n렌더 트리는 DOM 트리와 CSSOM 트리에 의해 정의된 스타일만 계산하였다. 하지만 기기의 뷰포트(Viewport) 내에서의 정확한 위치 및 크기는 계산되지 않았다.\n\n예를들어 CSS에 width:50% 로 정의되어 있다고 하면, 실제 브라우저에서 표현되는 정확한 사이즈는 계산되지 않았다는 의미이다.\n\n\n    \n    \n        \n    \n    \n\n\n따라서 브라우저에 출력하기 전 실제 출력되는 정확한 위치와 크기를 계산하여야 한다. 그 단계가 레이아웃 (layout)이라고 한다. 이 단계에서는 각 객체의 정확한 위치 및 크기를 계산하기 위해 렌더 트리의 루트에서부터 탐색해 실제 픽셀 값을 구하여 박스 모델 (Box Model)을 출력한다.\n\n\n    \n    \n        \n    \n    \n\n\n6. 페인트\n\nLayout 계산이 완료\n되면 이제 요소들을 실제 화면을 그리게 된다. 이전 단계에서 이미 요소들의 위치와 크기, 스타일 계산이 완료된 Render Tree 를 이용해 실제 픽셀 값을 채워넣게 된다. 이 때 텍스트, 색, 이미지, 그림자 효과등\n이 모두 처리되어 그려진다. 이 때 처리해야 하는 스타일이 복잡할수록 Paint 단계에 소요되는 시간이 늘어나게 된다. 간단한 예시로 단순한 단색 background-color의 경우 paint 속도가 빠르지만 그라데이션이나 그림자 효과등은 painting 소요시간이 비교적 더 오래 소요된다.\n\n7. 리플로우와 리페인트\n\n리플로우(Reflow)란 생성된 DOM 노드의 레이아웃(너비, 높이 등) 변경 시, 영향받은 모든 노드(자식, 부모 등)의 수치를 다시 계산하여 렌더 트리를 재생성하는 작업이다.\n\n리페인트(Repaint)란 Reflow 과정이 끝난 후 재생성된 렌더 트리를 다시 그리는 작업이다.\n\n8. 렌더링 최적화 (Reflow, Repaint 줄이기)\nReflow가 일어나는 대표적인 경우\n\n  페이지 초기 렌더링 시(최초 Layout 과정)\n  윈도우 리사이징 시 (Viewport 크기 변경시)\n  노드 추가 또는 제거\n  요소의 위치, 크기 변경 (left, top, margin, padding, border, width, height, 등..)\n  폰트 변경 과(텍스트 내용) 이미지 크기 변경(크기가 다른 이미지로 변경 시)\n\n\nReflow 발생 코드\n\n    function reFlow() { \n        document.getElementById(&#39;container&#39;).style.width = &#39;600px&#39;;\n        return false; \n    }\n\nRepaint (Paint)\nReflow 발생 이유와 같이 스타일의 모든 변경이 레이아웃 수치에 영향을 받는것은 아니다.\n\n즉, 노드의 background-color, visibillty, outline 등의 스타일 변경 시에는 레이아웃 수치가 변경되지 않으므로 Reflow 과정이 생략된 Repaint 과정만 일어나게 된다.\n\nRepaint 발생 코드\n\n    function rePaint() { \n        document.getElementById(&#39;container&#39;).style.backgroundColor = &#39;red&#39;; \n        return false; \n    }\n\n해결방법\n\n  클래스 변화에 따른 스타일 변화를 원할 경우, 최대한 DOM 구조 상 끝단에 위치한 노드에 주어라.\n  인라인 스타일을 최대한 배제하라.\n  애니메이션이 들어간 엘리먼트는 가급적 position:fixed 또는 position:absolute 로 지정\n  퀄리티와 퍼포먼스 사이에서 타협하라\n  테이블 레이아웃을 피하라\n  IE의 경우, CSS에서의 JS표현식을 피하라.\n  JS를 통해 스타일변화를 주어야 할 경우, 가급적 한번에 처리하라.\n  CSS Rules는 필요한 만큼만 정리하라.\n  position:relative 사용 시 주의하자\n\n\n\n\n참고사이트\n\n  boxfoxs\n  naverD2\n  Reflow 원인과 마크업 최적화\n\n"
} ,
  
  {
    "title"    : "수직정렬",
    "category" : "",
    "tags"     : " ",
    "url"      : "/blog/2020-01-13-vertical",
    "date"     : "January 13, 2020",
    "excerpt"  : "작업을 하다보면 가운데로 정렬하는 방법에 대해 고민하게 된다.\n\n초창기엔 무조건 화면을 그려내는것이 코딩인 줄 알았다.\n그게 참 한심한 생각이라는 건 프로젝트를 작업할 때에 부딪히는 이슈들을 경험하며 알게되었다.\n아래는 수직정렬하는 기본적인 방법에 대해 적어봤다.\n초창기에 보면 도움이 많이 될 거 같다.\n\n\n\npadding을 사용한 방법\n\n\n    See the Pen povYQMP by ahyoung\n    (@ahyoung) on Co...",
  "content"  : "작업을 하다보면 가운데로 정렬하는 방법에 대해 고민하게 된다.\n\n초창기엔 무조건 화면을 그려내는것이 코딩인 줄 알았다.\n그게 참 한심한 생각이라는 건 프로젝트를 작업할 때에 부딪히는 이슈들을 경험하며 알게되었다.\n아래는 수직정렬하는 기본적인 방법에 대해 적어봤다.\n초창기에 보면 도움이 많이 될 거 같다.\n\n\n\npadding을 사용한 방법\n\n\n    See the Pen povYQMP by ahyoung\n    (@ahyoung) on CodePen.\n\n\n이 방법은 개인적으로는 추천하지 않는다. 왜냐하면 만약에 부모의 높이값이 달라졌을 때마다 padding 값을 손수 수정해줘야 한다는 단점이 있기 때문이다.\n하지만 고정적이고 아주 간단한 레이아웃일 때에는 써도 무방하다.\n\nposition을 사용한 방법\n\n\n    See the Pen qBEvQeJ by ahyoung\n    (@ahyoung) on CodePen.\n\n\n포지션을 사용해 부모의 높이값이 변화했을때에도 유동적으로 가운데 위치할 수 있다.\n\n가상선택자인 before, after를 이용한 방법\n\n\n    See the Pen povYqzP by ahyoung\n    (@ahyoung) on CodePen.\n\n\n가상선택자인 before, after 를 이용해서 형제 인라인 요소를 생성후에 인라인 요소끼리 형제일 경우 vertical-align 속성을 사용할 수 있음을 이용한다.\n\ndisplay: table 속성을 이용한 방법\n\n\n    See the Pen dyPrwXE by ahyoung\n    (@ahyoung) on CodePen.\n\n\n테이블의 셀(즉 td,th) 은 vertical-align 속성이 있는것을 이용하여 디스플레이의 환경을 테이블로 바꾼다.\n"
} ,
  
  {
    "title"    : "디스플레이",
    "category" : "",
    "tags"     : " display, inline, inline-block, block",
    "url"      : "/blog/2020-01-12-display",
    "date"     : "January 12, 2020",
    "excerpt"  : "block 요소\n\nex) div,ul,li,h1~h6,header,footer,nav,section 등\n\n기준이 되는 부모의 width에 꽉 찬다.\nwidth 속성을 주면 부모 width 와의 차이만큼 자동으로 margin 처리된다.\n즉, width가 주어진 block요소를 가운데로 보내고자 한다면 나머지 영역의 margin값을 양쪽에 동일하게 분할해주어야 한다. 이와같은 css값이 auto 이다.\n\n&amp;lt;div class=&quot;displa...",
  "content"  : "block 요소\n\nex) div,ul,li,h1~h6,header,footer,nav,section 등\n\n기준이 되는 부모의 width에 꽉 찬다.\nwidth 속성을 주면 부모 width 와의 차이만큼 자동으로 margin 처리된다.\n즉, width가 주어진 block요소를 가운데로 보내고자 한다면 나머지 영역의 margin값을 양쪽에 동일하게 분할해주어야 한다. 이와같은 css값이 auto 이다.\n\n&amp;lt;div class=&quot;display-block&quot;&amp;gt;&amp;lt;/div&amp;gt;\n\n.display-block {\n    margin: 0 auto;\n}\n\ninline 요소\n\nex) a, span, img, input, em 등\n\n기본적으로 자기 자신이 갖은 컨텐츠의 크기만을 갖는다. width, height, margin-top, margin-bottom, padding-top, padding-bottom 의값을 인식할수 없다. width, height, padding, margin의 값을 제대로 반영하기 위해선, display를 block, 혹은 inline-block(편하게 width, height, padding, margin 의 프로퍼티를 갖는 inline 요소정도로 생각하면 되겠다.) 으로 주어야한다.\ninline요소를 센터로 보내는 방법은 부모에게 text-align:center 를 주면 된다.\n\n&amp;lt;div class=&quot;inline-wrap&quot;&amp;gt;\n    &amp;lt;span&amp;gt;inline 요소&amp;lt;/span&amp;gt;\n&amp;lt;/div&amp;gt;\n\n.inline-wrap {\n    text-align:center\n}\n\ntable 요소\n\nex) table, table-cell, table-row 등\n\ndisplay 속성을 table 속성으로 바꿔준다.\ntable을 보면 갯수가 몇개까지 늘어나든 동일한 너비를 구현할 수 있다.table 속성으로 바꾸면서까지 이 속성을 쓰는 이유는 유동적인 레이아웃을 만들기 위해서다.\n뒤에서 다룰 flex를 써도 유동적인 레이아웃을 만들 수 있다.\n하지만 flex는 ie10이상을 지원한다. 때문에 하위 브라우저까지 신경써야 하는 프로젝트라면 display: table;로 레이아웃을 짜는걸 추천한다.\n\n\n    See the Pen zYYdmOG by ahyoung\n    (@ahyoung) on CodePen.\n\n\n위에 코드펜을 보면 알 수 있듯이 목록의 갯수가 3개,2개,1개 일 때에 유동적인 레이아웃을 구현해냈다.\n네이버 톡톡, 파스타, 파트너센터에서 가장 많이 사용한 속성이다.\n\nflexbox 요소\n\nex) flex, flex-wrap, flex-grow, flex-shrink, flex-basis, order 등\n\n일반적인 웹 페이지 레이아웃은 display, float, position 등과 같은 속성을 사용해 구현한다.\n하지만 이 속성들은 구현 방법이 복잡하고 한계가 있다.\nflexbox를 사용하면 요소의 크기와 순서를 유연하게 배치할 수 있다.\n\nflexbox는 유동적인 웹 페이지에 효율적으로 요소를 배치, 정렬, 분산할 수 있다.\n복잡한 계산 없이 요소의 크기와 순서를 유연하게 배치할 수 있다.\n네이버 파트너센터 개편때에 회원가입 페이지를 마크업하면서 고민이 많았다.\n어떻게 하면 유동적으로 레이아웃할 수 있을까.. 많은 고민 끝에 선택한건 flex였다.\n이것 또한, ie10이상부터 지원하기로 했기 때문에 가능했던 일이었다.\n\n하지만, 여기서 변수가 있다. ie10 이상을 완전히 지원하지는 않는다는것이다. 10,11에서 버그가 발견되기도 한다.\n모바일 브라우저는 거의 대부분 지원한다고 봐도 무방하다.\n(Can I use 사이트의 ‘flex’ 검색 결과참고.)\n\n\n    See the Pen pBmzgw by ahyoung\n    (@ahyoung) on CodePen.\n\n\n위에 코드펜을 보면 알 수 있듯이 유연한 레이아웃을 구현해냈다.\n실제 페이지에도 적용하여 만족스러운 결과를 얻었다.\n"
} ,
  
  {
    "title"    : "jekyll을 이용해 자신만의 Github Blog 만들기",
    "category" : "",
    "tags"     : " jekyll, github",
    "url"      : "/blog/2019-12-29-jekyll",
    "date"     : "December 29, 2019",
    "excerpt"  : "Jelyll은 markdown으로 작성된 문서를 HTML로 변환하여 웹사이트를 구축할 수 있도록 돕는 Static Website generator로 Ruby로 작성되어 있다. HTML/CSS등의 정적파일만으로 사이트를 생성하므로 매우 빠르고 가벼우며 무료이다.\n\n설치과정\n\n1. github에 새로운 repository 만들기\n\n\n    \n    \n        \n    \n    \n\n\nGithub에서 새로운 저장소를 만든다. 이 때 저장소의...",
  "content"  : "Jelyll은 markdown으로 작성된 문서를 HTML로 변환하여 웹사이트를 구축할 수 있도록 돕는 Static Website generator로 Ruby로 작성되어 있다. HTML/CSS등의 정적파일만으로 사이트를 생성하므로 매우 빠르고 가벼우며 무료이다.\n\n설치과정\n\n1. github에 새로운 repository 만들기\n\n\n    \n    \n        \n    \n    \n\n\nGithub에서 새로운 저장소를 만든다. 이 때 저장소의 이름을 자신의 이름 뒤에 .github.io가 붙은 이름으로 짓는다.\n이렇게 해야 yourname.github.io의 도메인으로 접속할 수 있는 블로그가 된다.\n\n2. 환경세팅\n아래 설명은 윈도우 환경에서 설치한 내용이다.\n우선 Ruby를 설치한다.\n설치가 완료되면 윈도우 메뉴에서 Start Command Promt with Ruby 를 검색하면 다음과 같이 나타난다.\n\n\n    \n    \n        \n    \n    \n\n\n해당 커맨드에서\n\n    gem install jekyll\n\n을 입력해주면 설치가 진행된다.\n\n설치 이후 바로\n\n    jekyll new .\n\n를 실행하면 정상적으로 동작하지 않는다. 이유는 의존성을 갖는 패키지들의 설치가 필요하기 때문인데 오류를 보고 구글링하여 설치해도 되지만 필요한 파일을 미리 설치한다면 시간이 절약되므로 아래 패키지들을 미리 설치해준다.\n\n    gem install bundler \n\n    gem install minima \n\n    gem install jekyll-feed \n\n    gem install tzinfo-data\n\n설치가 끝나면\n\n    jekyll new .\n\n를 다시 실행해보자.\n\n정상적으로 설치가 완료됐다면 jekyll serve를 실행해보자.\njekyll 가 내장하고 있는 서버가 동작하고 로컬PC에서도 생성된 사이트를 확인할 수 있다.\n로컬에서 확인하기 위해서는 브라우저에서 http://localhost:4000 으로 접속해보자.\n아래 화면이 나왔다면 설치에 성공한것이다.\n\n\n    \n    \n        \n    \n    \n\n\n여기까지 설치과정에 대해 알아봤고, 다음 포스팅 때엔 jekyll 폴더구조 및 테마 적용에 대해 알아보겠다.\n"
} ,
  
  {
    "title"    : "Sample post",
    "category" : "",
    "tags"     : " A Tag, Test, Lorem, Ipsum",
    "url"      : "/blog/2019-06-30-sample-post",
    "date"     : "June 30, 2019",
    "excerpt"  : "Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. \nPraesent et diam eget libero egestas mattis sit amet vitae augue. Nam tinci...",
  "content"  : "Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. \nPraesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. \n\nDonec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.\n\n\n  Consectetur adipiscing elit\n  Donec a diam lectus\n  Sed sit amet ipsum mauris\n\n\nUt turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.\n\nNunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. Maecenas convallis ullamcorper ultricies. Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, id fringilla sem nunc vel mi. Nam dictum, odio nec pretium volutpat, arcu ante placerat erat, non tristique elit urna et turpis. Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. Fusce eget orci a orci congue vestibulum.\n\n\n    \n    \n        \n    \n    \n\n\nUt dolor diam, elementum et vestibulum eu, porttitor vel elit. Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id justo. Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper. Aliquam at massa ipsum. Quisque bibendum purus convallis nulla ultrices ultricies. Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. Fusce vel volutpat elit. Nam sagittis nisi dui.\n\n\n  Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis neque\n\n\nEtiam luctus porttitor lorem, sed suscipit est rutrum non. Curabitur lobortis nisl a enim congue semper. Aenean commodo ultrices imperdiet. Vestibulum ut justo vel sapien venenatis tincidunt.\n\nPhasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. Aliquam ut massa in turpis dapibus convallis. Praesent elit lacus, vestibulum at malesuada et, ornare et est. Ut augue nunc, sodales ut euismod non, adipiscing vitae orci1. Mauris ut placerat justo. Mauris in ultricies enim. Quisque nec est eleifend nulla ultrices egestas quis ut quam. Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. Cras quis ligula sem, vel elementum mi. Phasellus non ullamcorper urna.\n\n\n  \n    \n\n      John Smith, A Title About Citations &amp;#8617;\n    \n  \n\n"
} ,
  
  {
    "title"    : "Color Post",
    "category" : "",
    "tags"     : " Test, Color, Markdown",
    "url"      : "/blog/2019-05-18-color-post",
    "date"     : "May 18, 2019",
    "excerpt"  : "What a colorful post!\n\nThis is an idea that came from xukimseven/HardCandy-Jekyll \nlooking at this cheerful and colorful them, I wanted to enable something similar for mine.\n\nYou can go fork and star hers too! 😉\n\n\n\nHow does it work?\n\nBasically you...",
  "content"  : "What a colorful post!\n\nThis is an idea that came from xukimseven/HardCandy-Jekyll \nlooking at this cheerful and colorful them, I wanted to enable something similar for mine.\n\nYou can go fork and star hers too! 😉\n\n\n\nHow does it work?\n\nBasically you need to add just one thing, the color:\n\n---\nlayout: post\ntitle: Color Post\ncolor: brown\n---\n\n\nIt can either be a html color like brown (which look like red to me). Or with the rgb:\n\n---\nlayout: post\ntitle: Color Post\ncolor: rgb(165,42,42)\n---\n\n\nThe background used is lineart.png from xukimseven you can edit it in the config file. \nIf you want another one, put it in /assets/img as well.\n\n  ⚠️ It’s a bit hacking the css in the post.html\n\n"
} ,
  
  {
    "title"    : "Feature images",
    "category" : "",
    "tags"     : " Test, Lorem",
    "url"      : "/blog/2014-11-29-feature-images",
    "date"     : "November 29, 2014",
    "excerpt"  : "Hopefully you will find enough information about how to set images in your blog here.\nThis is an example of a post which includes a feature image specified in the front matter of the post. \nThe feature image spans the full-width of the page, and i...",
  "content"  : "Hopefully you will find enough information about how to set images in your blog here.\nThis is an example of a post which includes a feature image specified in the front matter of the post. \nThe feature image spans the full-width of the page, and is shown with the title on permalink pages:\n\nfeature-img: &quot;assets/img/pexels/desk-messy.jpeg&quot;\nthumbnail: &quot;assets/img/thumbnails/desk-messy.jpeg&quot; \n\n\nYou can also use a thumbnail, a smaller version of the same image to improve loading of the page.\nThe thumbnail will also be used when you share your article on other platform (linkedin, whatsapp, facebook, …).\n\n\n  \n    And now it is working\n  \n\n\nYou can also add images aligned in your post using the aligner include.\nMake sure to separate all of the image path from in a string separated with ,.\nIt by default look into assets/img/ so give the path from there, example:\n\n{% include aligner.html images=&quot;pexels/book-glass.jpeg,triangle.png&quot; %}\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\nHere you have two images side by side, but you can set more and set the amount per columns \n(by specifying the number of columns or let it be automatic using &quot;auto&quot;):\n\n{% include aligner.html images=&quot;portfolio/cabin.png,portfolio/cake.png,portfolio/circus.png&quot; column=3 %}\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\nit also works with only one images, it is made to display it smaller than normally.\nHowever you can just use the Markdown way of doing it to get the image normal sized and centered.\n\n# Markdown way (bigger)\n![Travel]({{ &quot;/assets/img/pexels/story.jpeg&quot; | relative_url}})\n# Aligner with only One (50% of width)\n{% include aligner.html images=&quot;pexels/story.jpeg&quot; %}\n\n\n    \n    \n        \n    \n    \n\n\n"
} ,
  
  {
    "title"    : "Markdown and HTML",
    "category" : "",
    "tags"     : " Test, Markdown",
    "url"      : "/blog/2014-11-28-markdown-and-html",
    "date"     : "November 28, 2014",
    "excerpt"  : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.\n\nTitle\n\nSub title\n\nTables have also bee...",
  "content"  : "Jekyll supports the use of Markdown with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.\n\nTitle\n\nSub title\n\nTables have also been extended from Markdown:\n\n\n  \n    \n      First Header\n      Second Header\n    \n  \n  \n    \n      Content Cell\n      Content Cell\n    \n    \n      Content Cell\n      Content Cell\n    \n  \n\n\nHere’s an example of an image, which is included using Markdown:\n\n\n\nThis is another example of list:\n\n\n  list of things\n    \n      Sub list\n      of Other things\n      with numbers\n    \n  \n  And many more\n    \n      Sub sub list\n        \n          can go on …\n            \n              and on …\n                \n                  and on !\n                \n              \n            \n          \n        \n      \n      That’s it.\n    \n  \n\n\nOther subtitle\n\nHighlighting for code in Jekyll is done using Base16 or Rouge. This theme makes use of Rouge by default.\n\n// count to ten\nfor (var i = 1; i &amp;lt;= 10; i++) {\n    console.log(i);\n}\n\n// count to twenty\nvar j = 0;\nwhile (j &amp;lt; 20) {\n    j++;\n    console.log(j);\n}\n\nMath\n\nType on Strap uses KaTeX to display maths. Equations such as \\(S_n = a \\times \\frac{1-r^n}{1-r}\\) can be displayed inline.\n\nAlternatively, they can be shown on a new line:\n\n\\[f(x) = \\int \\frac{2x^2+4x+6}{x-2}\\]\n\n"
} ,
  
  {
    "title"    : "What&#39;s your title",
    "category" : "",
    "tags"     : " Test, Lorem",
    "url"      : "/blog/2014-11-27-whats-your-title",
    "date"     : "November 27, 2014",
    "excerpt"  : "This is an example of a post which includes a feature image that has a\ntext, where you don’t want to redisplay the title.\nMind your image size in order for the text to be displayed where you want it to.\nThe only limit is your imagination.\n\nHere is...",
  "content"  : "This is an example of a post which includes a feature image that has a\ntext, where you don’t want to redisplay the title.\nMind your image size in order for the text to be displayed where you want it to.\nThe only limit is your imagination.\n\nHere is how the yaml looks inside the post:\n\ntitle: What&#39;s your title\nhide_title: true\nfeature-img: assets/img/pexels/story.jpeg\nauthor: mhagnumdw\ntags: [Test, Lorem]\n\n\nYou may wonder, why is there a title when you are not actually displaying it. \nWell that’s due to some jekyll limitation:\n\n\n  You can’t set the title to the empty string\n\n\nThe title is used elsewhere than inside the post, for example in the blog page that list this post.\nAn empty title would break those pages and possibly prevents jekyll to render your blog.\n"
} ,
  
  {
    "title"    : "The Real Lorem Ipsum",
    "category" : "",
    "tags"     : " Lorem, Color",
    "url"      : "/blog/2014-11-26-lorem-ipsum",
    "date"     : "November 26, 2014",
    "excerpt"  : "Lorem Ipsum\n\nfrom “de Finibus Bonorum et Malorum” written by Cicero in 45 BC.\n \nFind out more on lipsum.com. And if you like colors, check out the http color trends from w3schools.\n\nThe standard Lorem Ipsum passage (since 1500s)\n\n“Lorem ipsum dolo...",
  "content"  : "Lorem Ipsum\n\nfrom “de Finibus Bonorum et Malorum” written by Cicero in 45 BC.\n \nFind out more on lipsum.com. And if you like colors, check out the http color trends from w3schools.\n\nThe standard Lorem Ipsum passage (since 1500s)\n\n“Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.”\n\nSection 1.10.32\n\nLatin\n“Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?”\n\nTranslation by H. Rackham (1914)\n“But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?”\n\nSection 1.10.33\n\nLatin\n\n“At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.”\n\nTranslation by H. Rackham (1914)\n\n“On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.”\n\n"
} ,
  
  {
    "title"    : "Markup: Syntax Highlighting",
    "category" : "",
    "tags"     : " code",
    "url"      : "/blog/2014-08-08-markup-syntax-highlighting",
    "date"     : "August 8, 2014",
    "excerpt"  : "Syntax highlighting1 is a feature that displays source code. \nThis feature facilitates writing in a structured language such as a programming language or a markup language as it makes import things visually distinct.\n\nGFM Code Blocks\n\nGitHub Flavo...",
  "content"  : "Syntax highlighting1 is a feature that displays source code. \nThis feature facilitates writing in a structured language such as a programming language or a markup language as it makes import things visually distinct.\n\nGFM Code Blocks\n\nGitHub Flavored Markdown fenced code blocks are supported. To modify styling and highlight colors edit /_sass/syntax.scss.\n\n#container {\n  float: left;\n  margin: 0 -240px 0 0;\n  width: 100%;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n.highlight {\n  margin: 0;\n  padding: 1em;\n  font-family: $monospace;\n  font-size: $type-size-7;\n  line-height: 1.8;\n}\n\n\n&amp;lt;nav class=&quot;pagination&quot; role=&quot;navigation&quot;&amp;gt;\n  {% if page.previous %}\n    &amp;lt;a href=&quot;{{ site.url }}{{ page.previous.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.previous.title }}&quot;&amp;gt;Previous article&amp;lt;/a&amp;gt;\n  {% endif %}\n  {% if page.next %}\n    &amp;lt;a href=&quot;{{ site.url }}{{ page.next.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.next.title }}&quot;&amp;gt;Next article&amp;lt;/a&amp;gt;\n  {% endif %}\n&amp;lt;/nav&amp;gt;&amp;lt;!-- /.pagination --&amp;gt;\n\n\nmodule Jekyll\n  class TagIndex &amp;lt; Page\n    def initialize(site, base, dir, tag)\n      @site = site\n      @base = base\n      @dir = dir\n      @name = &#39;index.html&#39;\n      self.process(@name)\n      self.read_yaml(File.join(base, &#39;_layouts&#39;), &#39;tag_index.html&#39;)\n      self.data[&#39;tag&#39;] = tag\n      tag_title_prefix = site.config[&#39;tag_title_prefix&#39;] || &#39;Tagged: &#39;\n      tag_title_suffix = site.config[&#39;tag_title_suffix&#39;] || &#39;&amp;amp;#8211;&#39;\n      self.data[&#39;title&#39;] = &quot;#{tag_title_prefix}#{tag}&quot;\n      self.data[&#39;description&#39;] = &quot;An archive of posts tagged #{tag}.&quot;\n    end\n  end\nend\n\n\nCode Blocks in Lists\n\nIndentation matters. Be sure the indent of the code block aligns with the first non-space character after the list item marker (e.g., 1.). Usually this will mean indenting 3 spaces instead of 4.\n\n\n  Do step 1.\n  \n    Now do this:\n\n    def print_hi(name)\n  puts &quot;Hi, #{name}&quot;\nend\nprint_hi(&#39;Tom&#39;)\n#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.\n    \n  \n  Now you can do this.\n\n\nGitHub Gist Embed\n\nAn example of a Gist embed below:\n\n\n\n\n  \n    \n\n      Michael’s Rose, Minimal Mistakes &amp;#8617;\n    \n  \n\n"
} ,
  
  {
    "title"    : "Generate a table of content",
    "category" : "",
    "tags"     : " toc.js, kramdown, Markdown, Customization",
    "url"      : "/blog/2013-12-12-generate-a-table-of-content",
    "date"     : "December 12, 2013",
    "excerpt"  : "Using Kramdown GFM \n\n\n\n  Using Kramdown GFM     \n      Basic Usage\n    \n  \n  Using toc.js    \n      Customize with toc.js        \n          Use with this jekyll template\n        \n      \n      Basic Usage\n      How it would look like\n    \n  \n\n\nBasi...",
  "content"  : "Using Kramdown GFM \n\n\n\n  Using Kramdown GFM     \n      Basic Usage\n    \n  \n  Using toc.js    \n      Customize with toc.js        \n          Use with this jekyll template\n        \n      \n      Basic Usage\n      How it would look like\n    \n  \n\n\nBasic Usage\n\nYou need to put this at the beginning of the page where you want the table of content to be displayed\n\n* TOC\n{:toc}\n\n\nIt will then render the markdown and html titles (lines that begins with # or using the &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; tages)\n\nUsing toc.js\n\nDemo display of jekyll-table-of-contents by ghiculescu.\n\n\n\n\nCustomize with toc.js\n\ntoc.js stands for table of content, it is a js plugin that generates automatically a table of content of a post.\n\nUse with this jekyll template\n\nIf you want to customize the theme it is up to you, you can add the toc.js file into the asset &amp;gt; js and add it into the page.html layout with:\n\n&amp;lt;script src=&quot;/assets/js/toc.js&quot; &amp;gt;&amp;lt;/script&amp;gt;\n\nThen you can use it as it is said on the repository.\n\nBasic Usage\n\nThe script requires jQuery. First, reference toc.js in templates where you would like to add the table of content. Then, create an HTML element wherever you want your table of contents to appear:\n\n&amp;lt;div id=&quot;toc&quot;&amp;gt;&amp;lt;/div&amp;gt;\n\n\nThen you put your post with titles and all like:\n\n## Title\n## Mid title 1\nThis is text on page one\n## Mid title 2\nThis is text for page two\n### Sub title 2.a\nSome more text\n\n\nThen at the end of your post, you call the .toc() function using:\n\n&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;\n$(document).ready(function() {\n    $(&#39;#toc&#39;).toc();\n});\n&amp;lt;/script&amp;gt;\n\n\nHow it would look like\n\n\n\n\n\n\n\n\n"
} ,
  
  {
    "title"    : "Tech Stuff example",
    "category" : "",
    "tags"     : " Test, Markdown",
    "url"      : "/blog/2013-11-02-tech-stuff-example",
    "date"     : "November 2, 2013",
    "excerpt"  : "Because if you put some code in your blog, you would at least make it:\n\n\n  Searchable\n  Good looking\n\n\nSearch on code\n\nSearch should be working even for complicated escape symbols.\n\nsed -i &#39;s/\\&quot;hostname\\&quot;\\:.*$/\\&quot;hostname\\&quot;\\: \\&quot;&#39;$IPADDR&#39;\\&quot;\\,/g&#39; ope...",
  "content"  : "Because if you put some code in your blog, you would at least make it:\n\n\n  Searchable\n  Good looking\n\n\nSearch on code\n\nSearch should be working even for complicated escape symbols.\n\nsed -i &#39;s/\\&quot;hostname\\&quot;\\:.*$/\\&quot;hostname\\&quot;\\: \\&quot;&#39;$IPADDR&#39;\\&quot;\\,/g&#39; open-falcon/agent/config/cfg.json\n\n\nOr try searching for partial of a command, like this article should be returned when looking for “find grep”\n\nfind /etc -type f -exec cat &#39;{}&#39; \\; | tr -c &#39;.[:digit:]&#39; &#39;\\n&#39; | grep &#39;^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$&#39;\n\n\nCode highlighting examples\n\nBecause you might put code in your blog post and you want to make sure \nit will look good in here.\nAnd that the search function is working!\n\nJava\n\njava example\n\nimport java.util.*;\n\n@Example\npublic class Demo {\n  private static final String CONSTANT = &quot;String&quot;;\n  private Object o;\n  /**\n   * Creates a new demo.\n   * @param o The object to demonstrate.\n   */\n  public Demo(Object o) {\n    this.o = o;\n    String s = CONSTANT + &quot;Other example of text&quot;;\n    int i = 123 - 33 % 11;\n  }\n  public static void main(String[] args) {\n    Demo demo = new Demo();\n    System.out.println(demo.o.toString())\n  }\n}\n\n\nHTML\n\nhtml example\n\n&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html lang=&quot;en&quot;&amp;gt;\n  &amp;lt;body&amp;gt;\n    &amp;lt;div class=&quot;content&quot;&amp;gt;\n        This is an example\n    &amp;lt;/div&amp;gt;\n  &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n\n\nJavascript\n\n/**\n * Does a thing\n */\nfunction helloWorld(param1, param2) {\n  var something = 0;\n\n  // Do something\n  if (2.0 % 2 == something) {\n    console.log(&#39;Hello, world!&#39;);\n  } else {\n    return null;\n  }\n\n  // @TODO comment\n}\n\n\nYAML\n\nYou can also render some yaml, like this _config.yml:\n\n\n# Welcome to Jekyll!\n#\n# This config file is meant for settings that affect your whole blog, values\n# which you are expected to set up once and rarely edit after that. If you find\n# yourself editing this file very often, consider using Jekyll&#39;s data files\n# feature for the data you need to update frequently.\n#\n# This file, &quot;_config.yml&quot; is *NOT* reloaded automatically when you use\n# &#39;bundle exec jekyll serve&#39;. If you change this file, please restart the server process.\n\n# Site settings\n# These are used to personalize your new site. If you look in the HTML files,\n# you will see them accessed via AY Portfolio, , and so on.\n# You can create any custom variable you would like, and they will be accessible\n# in the templates via .\n\n# SITE CONFIGURATION\nbaseurl: &quot;/Type-on-Strap&quot;\nurl: &quot;https://sylhare.github.io&quot;\n\n# THEME-SPECIFIC CONFIGURATION\ntitle: Type on Strap                                    # site&#39;s title\ndescription: &quot;A website with blog posts and pages&quot;      # used by search engines\navatar: assets/img/triangle.png                         # Empty for no avatar in navbar\nfavicon: assets/favicon.ico                             # Icon displayed in the tab\n\nremote_theme: sylhare/Type-on-Strap                     # If using as a remote_theme in github\n\n"
} 
  
  ,
  
  {
  
  "title"    : "네이버 톡톡",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/0-naver-talk",
  "date"     : "July 17, 2020",
  "excerpt"  : "\n\n네이버 톡톡이란 사용자가 친구 추가없이, 별도 앱이나 프로그램 설치없이 PC와 모바일에서 바로 대화하는 웹 채팅 서비스입니다.\n\n모든 브라우저와 모든 모바일기기에서 차별 없이 보여야 하는 채팅서비스이므로 웹 접근성을 고려하여 마크업 하였습니다. 채팅 서비스인 만큼 말풍선과 유동적인 레이아웃을 고려하여 작업했습니다. 또한, 많은 사용자들을 위해 크로스 브라우징을 신경써서 마크업을 하였습니다.\n\n\n\n\n  URL\n  프로젝트 기간 : 201...",
  "content"  : "\n\n네이버 톡톡이란 사용자가 친구 추가없이, 별도 앱이나 프로그램 설치없이 PC와 모바일에서 바로 대화하는 웹 채팅 서비스입니다.\n\n모든 브라우저와 모든 모바일기기에서 차별 없이 보여야 하는 채팅서비스이므로 웹 접근성을 고려하여 마크업 하였습니다. 채팅 서비스인 만큼 말풍선과 유동적인 레이아웃을 고려하여 작업했습니다. 또한, 많은 사용자들을 위해 크로스 브라우징을 신경써서 마크업을 하였습니다.\n\n\n\n\n  URL\n  프로젝트 기간 : 2018/06 ~ 2019/06\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^8), 크롬, 엣지, 사파리, 파이어폭스, 오페라\n      MOBILE : android ^4.4.2, ios 최신\n    \n  \n  투입인원 : 3명\n  기여도 : 33%\n  소스코드관리 : git\n  사용 언어 : HTML5, CSS3(SCSS), gulp.js, javaScript\n  사용 프로그램 : git, Zeplin\n\n\n"
  
} ,
  
  {
  
  "title"    : "네이버 파트너센터",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/1-naver-partner",
  "date"     : "July 17, 2020",
  "excerpt"  : "\n\n네이버 톡톡 파트너센터이란 판매자가 고객과 별도의 앱 설치, 친구추가 없이 쉽고 간편하게 실시간으로 상담을 할 수 있는 서비스입니다.\n\n모든 브라우저와 모든 모바일기기에서 차별 없이 보여야 하는 채팅서비스이므로 웹 접근성을 고려하여 마크업 하였습니다. 채팅 서비스인 만큼 말풍선과 유동적인 레이아웃을 고려하여 작업했습니다. 또한, 많은 사용자들을 위해 크로스 브라우징을 신경써서 마크업을 하였습니다. 최근 2019년 하반기에 React.j...",
  "content"  : "\n\n네이버 톡톡 파트너센터이란 판매자가 고객과 별도의 앱 설치, 친구추가 없이 쉽고 간편하게 실시간으로 상담을 할 수 있는 서비스입니다.\n\n모든 브라우저와 모든 모바일기기에서 차별 없이 보여야 하는 채팅서비스이므로 웹 접근성을 고려하여 마크업 하였습니다. 채팅 서비스인 만큼 말풍선과 유동적인 레이아웃을 고려하여 작업했습니다. 또한, 많은 사용자들을 위해 크로스 브라우징을 신경써서 마크업을 하였습니다. 최근 2019년 하반기에 React.js 환경에서 회원가입페이지 개편 작업을 진행했습니다.\n\n\n\n\n  URL\n  프로젝트 기간 : 2018/06 ~ 2019/06\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^8), 크롬, 엣지, 사파리, 파이어폭스, 오페라\n      MOBILE : android ^4.4.2, ios 최신\n    \n  \n  투입인원 : 3명\n  기여도 : 33%\n  소스코드관리 : git\n  사용 언어 : HTML5, CSS3(SCSS), gulp.js, javaScript, React.js(2019년도 개편)\n  사용 프로그램 : git, Zeplin\n\n"
  
} ,
  
  {
  
  "title"    : "네이버 파스타",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/2-naver-pasta",
  "date"     : "July 17, 2020",
  "excerpt"  : "\n\n네이버 파스타란 네이버 내부의 개발자들이 사용하는 사이트로 API 서비스를 제공해줍니다.\n\n데이터가 들어가는 부분이 많은만큼 부트스트랩을 사용하여 유동적인 레이아웃으로 마크업하였습니다. 2019년도 하반기에 다국어 서비스가 지원되면서 영어, 중국어(간체, 번체), 일어, 한국어 등 언어가 변환되어도 레이아웃이 틀어지지 않게 개편 작업을 진행했습니다.\n\n\n\n\n  프로젝트 기간 : 2018/06 ~ 2018/12\n  프로젝트 유형 : 유지...",
  "content"  : "\n\n네이버 파스타란 네이버 내부의 개발자들이 사용하는 사이트로 API 서비스를 제공해줍니다.\n\n데이터가 들어가는 부분이 많은만큼 부트스트랩을 사용하여 유동적인 레이아웃으로 마크업하였습니다. 2019년도 하반기에 다국어 서비스가 지원되면서 영어, 중국어(간체, 번체), 일어, 한국어 등 언어가 변환되어도 레이아웃이 틀어지지 않게 개편 작업을 진행했습니다.\n\n\n\n\n  프로젝트 기간 : 2018/06 ~ 2018/12\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^10), 크롬, 엣지, 사파리, 파이어폭스, 오페라\n      MOBILE : 안드로이드, ios 최신\n    \n  \n  투입인원 : 1명\n  기여도 : 100%\n  소스코드관리 : git\n  사용 언어 : HTML5, CSS3(SCSS), gulp.js, Bootstrap, javaScript\n  사용 프로그램 : git\n\n\n"
  
} ,
  
  {
  
  "title"    : "네이버 요비",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/3-naver-yobi",
  "date"     : "July 17, 2020",
  "excerpt"  : "\n\n네이버 요비란 소프트웨어 협업 개발 플랫폼입니다. 쉽게 말해 github같은 소스코드관리를 할 수 있는 서비스입니다.\n\nReact.js 환경에서 컴포넌트 단위로 마크업 하였습니다. 컴포넌트 단위로 구성되어있는 만큼 재사용성에 비중을 두어 유동적인 마크업을 구현하였습니다.\n\n\n\n\n  프로젝트 기간 : 2018/06 ~ 2018/12\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^10), 크롬, 엣지,...",
  "content"  : "\n\n네이버 요비란 소프트웨어 협업 개발 플랫폼입니다. 쉽게 말해 github같은 소스코드관리를 할 수 있는 서비스입니다.\n\nReact.js 환경에서 컴포넌트 단위로 마크업 하였습니다. 컴포넌트 단위로 구성되어있는 만큼 재사용성에 비중을 두어 유동적인 마크업을 구현하였습니다.\n\n\n\n\n  프로젝트 기간 : 2018/06 ~ 2018/12\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^10), 크롬, 엣지, 사파리, 파이어폭스, 오페라\n      MOBILE : 안드로이드, ios 최신\n    \n  \n  투입인원 : 1명\n  기여도 : 100%\n  소스코드관리 : git\n  사용 언어 : HTML5, CSS3, React.js\n  사용 프로그램 : git(github, yobi), Zeplin\n\n\n"
  
} ,
  
  {
  
  "title"    : "좋은책 신사고",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/4-sinsago",
  "date"     : "July 17, 2020",
  "excerpt"  : "\n\n좋은책 신사고, 쎈, 스마트쎈 등 사이트 유지보수 및 이벤트 페이지 작업을 진행했습니다.\n\n이벤트 페이지에서는 CSS3의 애니메이션을 주로 이용하여 작업하였고 그 외 사이트 유지보수에서는 웹 접근성을 고려하여 마크업 하였습니다.\n\n\n\n  URL\n  프로젝트 기간 : 2018/05 ~ 2019/05\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^8), 크롬, 엣지, 사파리, 파이어폭스, 오페라\n   ...",
  "content"  : "\n\n좋은책 신사고, 쎈, 스마트쎈 등 사이트 유지보수 및 이벤트 페이지 작업을 진행했습니다.\n\n이벤트 페이지에서는 CSS3의 애니메이션을 주로 이용하여 작업하였고 그 외 사이트 유지보수에서는 웹 접근성을 고려하여 마크업 하였습니다.\n\n\n\n  URL\n  프로젝트 기간 : 2018/05 ~ 2019/05\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^8), 크롬, 엣지, 사파리, 파이어폭스, 오페라\n      MOBILE : 안드로이드, ios 최신\n    \n  \n  기여도 : 100%\n  소스코드관리 : git\n  사용 언어 : HTML5, CSS3, javaScript\n\n\n"
  
} ,
  
  {
  
  "title"    : "메가스터디",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/5-megastudy",
  "date"     : "July 17, 2020",
  "excerpt"  : "\n\n메가스터디학원, 지점별 학원 사이트 유지보수 및 이벤트 페이지를 작업했습니다.\n\nTweenMax를 사용하여 애니메이션 작업을 하였고, 메일링 코딩, 회원가입 페이지 등 웹접근성을 고려해 마크업 하였습니다.\n\n\n\n  URL\n  프로젝트 기간 : 2019/10 ~ 진행중\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^10), 크롬, 엣지\n      MOBILE : 안드로이드, ios 최신\n    \n  ...",
  "content"  : "\n\n메가스터디학원, 지점별 학원 사이트 유지보수 및 이벤트 페이지를 작업했습니다.\n\nTweenMax를 사용하여 애니메이션 작업을 하였고, 메일링 코딩, 회원가입 페이지 등 웹접근성을 고려해 마크업 하였습니다.\n\n\n\n  URL\n  프로젝트 기간 : 2019/10 ~ 진행중\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^10), 크롬, 엣지\n      MOBILE : 안드로이드, ios 최신\n    \n  \n  기여도 : 100%\n  사용 언어 : HTML5, asp, CSS3, javaScript, TweenMax\n\n\n"
  
} ,
  
  {
  
  "title"    : "스토리잼",
  "category" : "",
  "tags"     : " ",
  "url"      : "/portfolio/6-storyjam",
  "date"     : "July 17, 2020",
  "excerpt"  : "\n\n메가스터디학원, 지점별 학원 사이트 유지보수 및 이벤트 페이지를 작업했습니다.\n\nTweenMax를 사용하여 애니메이션 작업을 하였고, 메일링 코딩, 회원가입 페이지 등 웹접근성을 고려해 마크업 하였습니다.\n\n\n\n  URL\n  프로젝트 기간 : 2019/10 ~ 진행중\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^10), 크롬, 엣지\n      MOBILE : 안드로이드, ios 최신\n    \n  ...",
  "content"  : "\n\n메가스터디학원, 지점별 학원 사이트 유지보수 및 이벤트 페이지를 작업했습니다.\n\nTweenMax를 사용하여 애니메이션 작업을 하였고, 메일링 코딩, 회원가입 페이지 등 웹접근성을 고려해 마크업 하였습니다.\n\n\n\n  URL\n  프로젝트 기간 : 2019/10 ~ 진행중\n  프로젝트 유형 : 유지보수\n  크로스브라우징\n    \n      PC : 익스(^10), 크롬, 엣지\n      MOBILE : 안드로이드, ios 최신\n    \n  \n  기여도 : 100%\n  사용 언어 : HTML5, asp, CSS3, javaScript, TweenMax\n\n\n"
  
} 
  
]
